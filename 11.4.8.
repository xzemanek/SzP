#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define BOUNDARY_REACHED 1;
#define LOWL_SUCCESS 0;
#define LOWL_OK 0;
#define LOWL_FAIL 1;
#define LOWL_PROBLEM 2;

typedef struct OWN
{
	float data;
	struct OWN *next;
}OWN;

typedef struct LOWL
{
	OWN *beg;
	OWN *cur;
}

/*
LOWL *lowl_create_random(unsigned int size)
void lowl_destroy(LOWL *list)
void lowl_print(LOWL *list)
char lowl_delete(LOWL* list)
char lowl_interpolate_linear(LOWL *list)
*/

LOWL *lowl_create_empty(void);
{
	LOWL *rtrn;
	rtrn->beg=NULL;
	rtrn->cur=NULL;
  
	rtrn=(LOWL *)malloc(sizeof(LOWL *))
	if(rtrn==NULL)
	{
		return NULL;
	}
	return rtrn;
}

char lowl_cur_step_left(LOWL *list)
{
	if(list->cur==list->beg)
	{
		return BOUNDARY_REACHED;
	}
	OWN *leftN=list->beg;
	while(leftN->next != list->cur)
	{
		leftN=leftN->next;
	}
	list->cur=leftN;
	return LOWL_SUCESS;
}

char lowl_cur_step_right(LOWL *list)
{
	if(list->cur->next==NULL)
	{
	return BOUNDARY_REACHED;
	}
	
	list->cur->=list->cur->next;
	return LOWL_SUCCESS;
}

OWN *lowl_insert_right(LOWL* list, float val)
{
	OWN *newN=malloc(sizeof(OWN));
	if(newN==NULL)
	{
        	return NULL;
	}
    	newN->data=val;
    
	if(list->beg==NULL)
	{    	
    		list->cur=newN;
    		list->beg=newN;
		list->beg->next=NULL;	
    		return newN;
	}
	
	if(list->cur->next==NULL)
	{
		list->cur->next=newN;
		newN->next=NULL;
		return newN;
	}
	
	OWN *rightN=list->cur->next;
	list->cur->next=newN;
	list->cur->next->next=rightN;
	
	return newN;
	
}

OWN *lowl_insert_left(LOWL* list, float val)
{
	OWN *newN=malloc(sizeof(OWN));
	if(newN==NULL)
	{
        	return NULL;
	}
    	newN->data=val;
    
	if(list->beg==NULL)
	{    	
    		list->cur=newN;
    		list->beg=newN;
		list->beg->next=NULL;	
    		return newN;
	}
	
	if(list->cur=list->beg)
	{
		list->beg=newN;
		list->beg->next=list->cur;
		return newN;
	}
	
	lowl_cur_step_left(list);
	lowl_insert_right(list,val);
	lowl_cur_step_right(list);
	lowl_cur_step_right(list);	
}


int main()
{
}
